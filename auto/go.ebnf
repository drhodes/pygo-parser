 unicode_char   = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
 unicode_letter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" .
 unicode_digit  = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .

 letter        = unicode_letter | "_" .
 decimal_digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
 octal_digit   = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" .
 hex_digit     = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | 
                 "a" | "b" | "c" | "d" | "e" | "f" | 
                 "A" | "B" | "C" | "D" | "E" | "F" .

 identifier = letter { letter | unicode_digit } .

 int_lit     = decimal_lit | octal_lit | hex_lit .
 decimal_lit = ( "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ) { decimal_digit } .
 octal_lit   = "0" { octal_digit } .
 hex_lit     = "0" ( "x" | "X" ) hex_digit { hex_digit } .

 float_lit = decimals "." [ decimals ] [ exponent ] |
             decimals exponent |
             "." decimals [ exponent ] .
 decimals  = decimal_digit { decimal_digit } .
 exponent  = ( "e" | "E" ) [ "+" | "-" ] decimals .

 char_lit         = "'" ( unicode_value | byte_value ) "'" .
 unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
 byte_value       = octal_byte_value | hex_byte_value .
 octal_byte_value = `\` octal_digit octal_digit octal_digit .
 hex_byte_value   = `\` "x" hex_digit hex_digit .
 little_u_value   = `\` "u" hex_digit hex_digit hex_digit hex_digit .
 big_u_value      = `\` "U" hex_digit hex_digit hex_digit hex_digit
                            hex_digit hex_digit hex_digit hex_digit .
 escaped_char     = `\` ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | `\` | "'" | `"` ) .

 string_lit             = raw_string_lit | interpreted_string_lit .
 raw_string_lit         = "`" { unicode_char } "`" .
 interpreted_string_lit = `"` { unicode_value | byte_value } `"` .

 Type      = TypeName | TypeLit | "(" Type ")" .
 TypeName  = QualifiedIdent.
 TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
             SliceType | MapType | ChannelType .

 ArrayType   = "[" ArrayLength "]" ElementType .
 ArrayLength = Expression .
 ElementType = Type .

 SliceType = "[" "]" ElementType .

 StructType     = "struct" "{" { FieldDecl ";" } "}" .
 FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
 AnonymousField = [ "*" ] TypeName .
 Tag            = string_lit .

 PointerType = "*" BaseType .
 BaseType = Type .

 FunctionType   = "func" Signature .
 Signature      = Parameters [ Result ] .
 Result         = Parameters | Type .
 Parameters     = "(" [ ParameterList [ "," ] ] ")" .
 ParameterList  = ParameterDecl { "," ParameterDecl } .
 ParameterDecl  = [ IdentifierList ] ( Type | "..." ) .

 InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
 MethodSpec         = MethodName Signature | InterfaceTypeName .
 MethodName         = identifier .
 InterfaceTypeName  = TypeName .

 MapType     = "map" "[" KeyType "]" ElementType .
 KeyType     = Type .

 ChannelType   = Channel | SendChannel | RecvChannel .
 Channel       = "chan" ElementType .
 SendChannel   = "chan" "<-" ElementType .
 RecvChannel   = "<-" "chan" ElementType .

 Block = "{" { Statement ";" } "}" .

 Declaration   = ConstDecl | TypeDecl | VarDecl .
 TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .

 ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
 ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .

 IdentifierList = identifier { "," identifier } .
 ExpressionList = Expression { "," Expression } .

 TypeDecl     = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
 TypeSpec     = identifier Type .

 VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
 VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .

 ShortVarDecl = IdentifierList ":=" ExpressionList .

 FunctionDecl = "func" identifier Signature [ Body ] .
 Body         = Block.

 MethodDecl   = "func" Receiver MethodName Signature [ Body ] .
 Receiver     = "(" [ identifier ] [ "*" ] BaseTypeName ")" .
 BaseTypeName = identifier .

 Operand    = Literal | QualifiedIdent | MethodExpr | "(" Expression ")" .
 Literal    = BasicLit | CompositeLit | FunctionLit .
 BasicLit   = int_lit | float_lit | char_lit | string_lit .

 QualifiedIdent = [ PackageName "." ] identifier .

 CompositeLit  = LiteralType "{" [ ElementList [ "," ] ] "}" .
 LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
                 SliceType | MapType | TypeName | "(" LiteralType ")" .
 ElementList   = Element { "," Element } .
 Element       = [ Key ":" ] Value .
 Key           = FieldName | ElementIndex .
 FieldName     = identifier .
 ElementIndex  = Expression .
 Value         = Expression .

 FunctionLit = FunctionType Body .

 PrimaryExpr =
         Operand |
         Conversion |
         BuiltinCall |
         PrimaryExpr Selector |
         PrimaryExpr Index |
         PrimaryExpr Slice |
         PrimaryExpr TypeAssertion |
         PrimaryExpr Call .

 Selector       = "." identifier .
 Index          = "[" Expression "]" .
 Slice          = "[" Expression ":" [ Expression ] "]" .
 TypeAssertion  = "." "(" Type ")" .
 Call           = "(" [ ExpressionList [ "," ] ] ")" .

 Expression = UnaryExpr | Expression binary_op UnaryExpr .
 UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

 binary_op  = log_op | com_op | rel_op | add_op | mul_op .
 log_op     = "||" | "&&" .
 com_op     = "<-" .
 rel_op     = "==" | "!=" | "<" | "<=" | ">" | ">=" .
 add_op     = "+" | "-" | "|" | "^" .
 mul_op     = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .

 unary_op   = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .

 MethodExpr    = ReceiverType "." MethodName .
 ReceiverType  = TypeName | "(" "*" TypeName ")" .

 Conversion = LiteralType "(" Expression ")" .

 Statement =
         Declaration | LabeledStmt | SimpleStmt |
         GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
         FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
         DeferStmt .

 SimpleStmt = EmptyStmt | ExpressionStmt | IncDecStmt | Assignment | ShortVarDecl .

 EmptyStmt = .

 LabeledStmt = Label ":" Statement .
 Label       = identifier .

 ExpressionStmt = Expression .

 IncDecStmt = Expression ( "++" | "--" ) .

 Assignment = ExpressionList assign_op ExpressionList .

 assign_op = [ add_op | mul_op ] "=" .

 IfStmt    = "if" [ SimpleStmt ";" ] [ Expression ] Block [ "else" Statement ] .

 SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .

 ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
 ExprCaseClause = ExprSwitchCase ":" { Statement ";" } .
 ExprSwitchCase = "case" ExpressionList | "default" .

 TypeSwitchStmt  = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
 TypeSwitchGuard = [ identifier ":=" ] Expression "." "(" "type" ")" .
 TypeCaseClause  = TypeSwitchCase ":" { Statement ";" } .
 TypeSwitchCase  = "case" TypeList | "default" .
 TypeList        = Type { "," Type } .

 ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
 Condition = Expression .

 ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
 InitStmt = SimpleStmt .
 PostStmt = SimpleStmt .

 RangeClause = ExpressionList ( "=" | ":=" ) "range" Expression .

 GoStmt = "go" Expression .

 SelectStmt = "select" "{" { CommClause } "}" .
 CommClause = CommCase ":" { Statement ";" } .
 CommCase = "case" ( SendExpr | RecvExpr) | "default" .
 SendExpr =  Expression "<-" Expression .
 RecvExpr =  [ Expression ( "=" | ":=" ) ] "<-" Expression .

 ReturnStmt = "return" [ ExpressionList ] .

 BreakStmt = "break" [ Label ] .

 ContinueStmt = "continue" [ Label ] .

 GotoStmt = "goto" Label .

 FallthroughStmt = "fallthrough" .

 DeferStmt = "defer" Expression .

 BuiltinCall = identifier "(" [ BuiltinArgs ] ")" .
 BuiltinArgs = Type [ "," ExpressionList ] | ExpressionList .

 SourceFile       = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .

 PackageClause  = "package" PackageName .
 PackageName    = identifier .

 ImportDecl       = "import" ( ImportSpec | "(" { ImportSpec ";" } ")" ) .
 ImportSpec       = [ "." | PackageName ] ImportPath .
 ImportPath       = string_lit .
